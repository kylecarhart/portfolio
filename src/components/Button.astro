---
import type { VariantProps } from "class-variance-authority";
import { cva } from "class-variance-authority";
import { cn } from "../utils/cn";

const buttonVariants = cva(
  "inline-flex items-center justify-center cursor-pointer rounded-full border-1 shadow-[0_0_10px_0] transition-all duration-200 ease-in-out hover:scale-102",
  {
    variants: {
      variant: {
        default:
          "text-default border-default shadow-default/30 hover:shadow-default/50",
        primary:
          "text-primary border-primary shadow-primary/30 hover:shadow-primary/50",
      },
      size: {
        default: "px-6 py-2",
        small: "px-3 py-1 text-sm",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

type ButtonVariants = VariantProps<typeof buttonVariants>;

interface Props {
  /** The URL that the button links to */
  href: string;
  /** Optional CSS classes to add to the button */
  class?: string;
  /** The visual style variant of the button */
  variant?: ButtonVariants["variant"];
  /** The size variant of the button */
  size?: ButtonVariants["size"];
  /** Whether the link should open in a new tab */
  openInNewTab?: boolean;
  /** Optional title attribute for the button */
  title?: string;
}

const {
  href,
  variant = "default",
  size = "default",
  class: className,
  openInNewTab = false,
  title,
} = Astro.props;

const targetProps = openInNewTab
  ? {
      target: "_blank",
      rel: "noopener noreferrer",
    }
  : {};
---

<a
  class={cn(buttonVariants({ variant, size }), className)}
  href={href}
  {...targetProps}
  {title}
>
  <span class="font-bold flex items-center gap-2">
    <slot />
  </span>
</a>
